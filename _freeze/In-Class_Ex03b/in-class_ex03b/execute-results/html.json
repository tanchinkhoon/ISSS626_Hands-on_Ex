{
  "hash": "289c92f9b116d92a3854fdd637062eb0",
  "result": {
    "engine": "knitr",
    "markdown": "---\ntitle: \"In-class Exercise 3b: Working with Open Government Data\"\nauthor: \"TAN Chin Khoon\"\ndate: \"September 13, 2025\"\ndate-modified: \"last-modified\"\nnumber-sections: true\nexecute: \n  eval: true\n  echo: true\n  warning: false\n  freeze: true\n---\n\n# Learning Outcome\nBy the end of this hands-on exercise, you will be able to:\n- Preparing ACRA (Accounting and Corporate Regulatory Authority) Information on Corporate Entities datasets downloaded from data.gov.sg portal for geocoding,\n- Geocoding the tidydata by using SLA OneMap API,\n- Converting the geocoded transaction data into sf point feature data.frame, and\n- Wrangling the sf point features to avoid overlapping point features.\n\n# Loading the R package\n\n\n::: {.cell}\n\n```{.r .cell-code}\npacman::p_load(tidyverse, sf, tmap, httr)\n```\n:::\n\n\n# Importing ACRA data\n\n\n::: {.cell}\n\n```{.r .cell-code}\nfolder_path <- \"/Users/cktan/Desktop/SMU/01_Geospatial Analytics (ISSS626)/Hands-on_Ex/Take-home_Ex01/data/aspatial\"\nfile_list <- list.files(path = folder_path, \n                        pattern = \"^ACRA*.*\\\\.csv$\", \n                        full.names = TRUE)\n\nacra_data <- file_list %>%\n  map_dfr(read_csv)\n```\n:::\n\n\n# Saving ACRA data\n\n\n::: {.cell}\n\n```{.r .cell-code}\nwrite_rds(acra_data,\n          \"/Users/cktan/Desktop/SMU/01_Geospatial Analytics (ISSS626)/Hands-on_Ex/Take-home_Ex01/data/rds/acra_data.rds\")\n```\n:::\n\n\n# Tidying ACRA data\n\n\n::: {.cell}\n\n```{.r .cell-code}\nbiz_56111 <- acra_data %>%\n  select(1:24) %>%\n  filter(primary_ssic_code == 56111) %>%\n  rename(date = registration_incorporation_date) %>%\n  mutate(date = as.Date(date),\n         YEAR = year(date),\n         MONTH_NUM = month(date),\n         MONTH_ABBR = month(date, \n                            label = TRUE, \n                            abbr = TRUE)) %>% \n  mutate(\n    postal_code = str_pad(postal_code, \n    width = 6, side = \"left\", pad = \"0\")) %>%\n           filter(YEAR == 2025)    \n```\n:::\n\n\n# Geocoding (It took 32 seconds to process the chunk of codes)\n\n\n::: {.cell}\n\n```{.r .cell-code}\npostcodes <- unique(biz_56111$postal_code)\n\nurl <- \"https://onemap.gov.sg/api/common/elastic/search\"\n\nfound <- data.frame()\nnot_found <- data.frame(postcode = character())\n\nfor (pc in postcodes) {\n  query <- list(\n    searchVal = pc,\n    returnGeom = \"Y\",\n    getAddrDetails = \"Y\",\n    pageNum = \"1\"\n  )\n  \n  res <- GET(url, query = query)\n  json <- content(res)\n  \n  if (json$found != 0) {\n    df <- as.data.frame(json$results, stringsAsFactors = FALSE)\n    df$input_postcode <- pc\n    found <- bind_rows(found, df)\n  } else {\n    not_found <- bind_rows(not_found, data.frame(postcode = pc))\n  }\n}\n```\n:::\n\n\n# Tidying the geocoded data\n\n\n::: {.cell}\n\n```{.r .cell-code}\nfound <- found %>%\n  select(1:10)\n```\n:::\n\n\n# Appending the location information\n\n\n::: {.cell}\n\n```{.r .cell-code}\nbiz_56111 = biz_56111 %>%\n  left_join(found, \n            by = c('postal_code' = 'POSTAL'))\n```\n:::\n\n\n# Saving the data\n\n\n::: {.cell}\n\n```{.r .cell-code}\nwrite_rds(biz_56111, \"/Users/cktan/Desktop/SMU/01_Geospatial Analytics (ISSS626)/Hands-on_Ex/Take-home_Ex01/data/rds/biz_56111.rds\")\n```\n:::\n\n\n# Converting into SF data frame\n\n\n::: {.cell}\n\n```{.r .cell-code}\nbiz_56111_sf <- st_as_sf(biz_56111, \n                         coords = c(\"X\",\"Y\"),\n                         crs=3414) \n```\n:::\n\n\n# Visualising the distribution\n\n\n::: {.cell}\n\n```{.r .cell-code}\nggplot(data = biz_56111,\n       aes(x = MONTH_ABBR)) +\n  geom_bar()\n```\n\n::: {.cell-output-display}\n![](in-class_ex03b_files/figure-html/unnamed-chunk-10-1.png){width=672}\n:::\n:::\n",
    "supporting": [
      "in-class_ex03b_files"
    ],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}